<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Responsibility–Literacy–Process Bingo</title>

<!-- Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
<style>
:root {
  --black: #020301;
  --yellow: #ffdb15;
  --white: #f3f5f9;
  --gray: #c7c9cd;
}
body {
  font-family: 'Inter', sans-serif;
  background: var(--white);
  color: var(--black);
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  min-height: 100vh;
}
h1 {
  margin-top: 40px;
  font-size: 1.8rem;
  font-weight: 600;
}
#bingo-grid {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-gap: 10px;
  max-width: 900px;
  margin-top: 30px;
}
.square {
  background: white;
  border: 1px solid var(--gray);
  border-radius: 8px;
  padding: 14px;
  text-align: center;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 14px;
  min-height: 90px;
}
.square:hover {
  background: var(--yellow);
  color: var(--black);
  font-family: 'Impact', sans-serif;
}
.square.active {
  background: var(--yellow);
  color: var(--black);
  font-weight: 600;
}
#score {
  margin-top: 25px;
  font-size: 1.2rem;
  font-family: 'Impact', sans-serif;
}
button {
  margin-top: 20px;
  background: var(--black);
  color: var(--white);
  border: none;
  border-radius: 6px;
  padding: 10px 16px;
  cursor: pointer;
  font-size: 14px;
  transition: background 0.2s ease;
}
button:hover {
  background: var(--yellow);
  color: var(--black);
}
</style>
</head>

<body>
<h1>Responsibility – Literacy – Process Bingo</h1>
<div id="bingo-grid"></div>
<div id="score">0 / 25</div>
<button id="share">Share my score</button>

<script>
const squares = [
  // Governance
  "Named owner for every AI loop decision (not a committee)",
  "Audit trail exists for model outputs and human overrides",
  "Each AI app mapped to 'in / over / out of loop' with clear accountability",
  "Explainability standards set for devs, execs, and end users",
  "Risk sign-off by a human with a name, not a department",
  // Literacy
  "Role-based AI literacy paths exist for all who touch AI",
  "EU AI Act literacy documented by each functional team",
  "Managers trained to critically evaluate AI outputs",
  "Literacy measured by skill demonstration, not course completions",
  "Leadership completes the same literacy track as everyone else",
  // Process / Architecture
  "Data ownership defined for every major dataset",
  "Data contracts govern all producer–consumer interfaces",
  "Data is traceable to its source with clear stewardship roles",
  "Decision logic understandable at the board level (no black boxes)",
  "Each agent has a defined purpose and scope—no orphaned bots",
  // Measurement
  "Touchless and exception rates tracked at process level",
  "Analyst time reallocated from processing to judgment (Human-value KPI)",
  "Each pilot includes measurement and rollback planning",
  "Post-AI performance equals or improves on pre-AI KPIs",
  "Governance reviews follow every major AI incident",
  // Culture
  "AI strategy embedded in real operating cadence, not a vanity team",
  "Documented post-mortems anytime humans override AI",
  "KPIs co-owned by process and product leads, not IT alone",
  "Organization talks openly about all kinds of AI risks",
  "Interdisciplinary team regularly reviews AI impact together"
];

const grid = document.getElementById("bingo-grid");
const scoreDisplay = document.getElementById("score");

squares.forEach(text => {
  const div = document.createElement("div");
  div.classList.add("square");
  div.textContent = text;
  div.addEventListener("click", () => {
    div.classList.toggle("active");
    updateScore();
  });
  grid.appendChild(div);
});

function updateScore() {
  const selected = document.querySelectorAll(".square.active").length;
  scoreDisplay.textContent = `${selected} / 25`;
}

document.getElementById("share").addEventListener("click", async () => {
  const score = scoreDisplay.textContent;
  try {
    await navigator.clipboard.writeText(`Our team scored ${score} on Responsibility–Literacy–Process Bingo.`);
    alert(`Copied to clipboard!\nShare this with your team: ${score}`);
  } catch (err) {
    alert("Could not copy to clipboard.");
  }
});
</script>
</body>
</html>
